@{
    ViewData["Title"] = "Thống kê";
    Layout = "_DashboardLayout";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<h2 class="page-title">Thống kê tổng quan</h2>

<!-- Tổng quan -->
<div class="inventory-section animate__animated animate__fadeInUp">
    <h3>Số lượng tồn kho</h3>
    <table class="table-inventory">
        <thead>
            <tr>
                <th>Sản phẩm</th>
                <th>Số lượng tồn kho</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ViewBag.Inventory)
            {
                <tr>
                    <td>@item.NamePro</td>
                    <td>@item.Quantity</td>
                </tr>
            }
        </tbody>
    </table>
    <div class="total-inventory">
        <h4>Tổng số lượng tồn kho: @ViewBag.TotalInventory</h4>
    </div>
</div>

<!-- Biểu đồ và bảng -->
<div class="view-toggle">
    <button id="viewCharts" class="btn btn-primary active">Xem biểu đồ</button>
    <button id="viewTable" class="btn btn-secondary">Xem bảng</button>
</div>

<div id="chartView" class="chart-container" style="display: flex;">
    <div class="chart-wrapper">
        <canvas id="orderStatusChart"></canvas>
    </div>
    <div class="chart-wrapper">
        <canvas id="inventoryChart"></canvas>
    </div>

    <div class="chart-wrapper">
        <canvas id="monthlyRevenueChart"></canvas>
    </div>
</div>

<div id="tableView" class="table-container" style="display: none;">
    <table class="table-statistics">
        <thead>
            <tr>
                <th>Tháng</th>
                <th>Trạng thái</th>
                <th>Doanh thu</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ViewBag.MonthlyRevenue)
            {
                <tr>
                    <td>Tháng @item.Month</td>
                    <td>Đã giao</td>
                    <td>@item.Revenue.ToString("N0") đ</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<style>
    .inventory-section {
        margin-top: 20px;
    }

    .table-inventory {
        width: 100%;
        max-width: 800px;
        border-collapse: collapse;
        margin: 20px auto;
    }

        .table-inventory th, .table-inventory td {
            padding: 10px;
            text-align: center;
            border: 1px solid #ddd;
        }

    .total-inventory {
        text-align: center;
        margin-top: 10px;
        font-weight: bold;
        font-size: 18px;
    }
    .summary-container {
        display: flex;
        justify-content: space-around;
        margin-bottom: 20px;
    }

    .summary-item {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        text-align: center;
        width: 30%;
    }

    .chart-container, .table-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .chart-wrapper {
        padding: 20px;
        width: 45%;
        background-color: #fff;
        border-radius: 8px;
        margin: 0 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .table-statistics {
        width: 100%;
        max-width: 800px;
        border-collapse: collapse;
        margin: 20px auto;
    }

        .table-statistics th, .table-statistics td {
            padding: 10px;
            text-align: center;
            border: 1px solid #ddd;
        }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const inventoryData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Inventory));

        const ctxInventory = document.getElementById("inventoryChart").getContext("2d");

        new Chart(ctxInventory, {
            type: "pie",
            data: {
                labels: inventoryData.map(item => item.NamePro),
                datasets: [{
                    data: inventoryData.map(item => item.Quantity),
                    backgroundColor: inventoryData.map(() => `#${Math.floor(Math.random() * 16777215).toString(16)}`)
                }]
            },
            options: { responsive: true }
        });
    });

    document.addEventListener("DOMContentLoaded", function () {
        const viewCharts = document.getElementById("viewCharts");
        const viewTable = document.getElementById("viewTable");
        const chartView = document.getElementById("chartView");
        const tableView = document.getElementById("tableView");

        const orderStatusData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.OrderStatusData));
        const monthlyRevenueData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.MonthlyRevenue));

        viewCharts.addEventListener("click", function () {
            chartView.style.display = "flex";
            tableView.style.display = "none";
            viewCharts.classList.add("active");
            viewTable.classList.remove("active");
        });

        viewTable.addEventListener("click", function () {
            chartView.style.display = "none";
            tableView.style.display = "block";
            viewTable.classList.add("active");
            viewCharts.classList.remove("active");
        });

        const ctx1 = document.getElementById("orderStatusChart").getContext("2d");
        const ctx2 = document.getElementById("monthlyRevenueChart").getContext("2d");

        new Chart(ctx1, {
            type: "pie",
            data: {
                labels: orderStatusData.map(item => item.Status),
                datasets: [{
                    data: orderStatusData.map(item => item.Count),
                    backgroundColor: ["#007bff", "#28a745", "#ffc107", "#dc3545"]
                }]
            },
            options: { responsive: true }
        });

        new Chart(ctx2, {
            type: "line",
            data: {
                labels: monthlyRevenueData.map(item => `Tháng ${item.Month}`),
                datasets: [{
                    label: "Doanh thu",
                    data: monthlyRevenueData.map(item => item.Revenue),
                    backgroundColor: "#28a745",
                    borderColor: "#28a745",
                    fill: false
                }]
            },
            options: { responsive: true }
        });
    });
</script>
